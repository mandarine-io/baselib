// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// EngineMock is an autogenerated mock type for the Engine type
type EngineMock struct {
	mock.Mock
}

type EngineMock_Expecter struct {
	mock *mock.Mock
}

func (_m *EngineMock) EXPECT() *EngineMock_Expecter {
	return &EngineMock_Expecter{mock: &_m.Mock}
}

// Render provides a mock function with given fields: tmplName, args
func (_m *EngineMock) Render(tmplName string, args any) (string, error) {
	ret := _m.Called(tmplName, args)

	if len(ret) == 0 {
		panic("no return value specified for Render")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, any) (string, error)); ok {
		return rf(tmplName, args)
	}
	if rf, ok := ret.Get(0).(func(string, any) string); ok {
		r0 = rf(tmplName, args)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, any) error); ok {
		r1 = rf(tmplName, args)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EngineMock_Render_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Render'
type EngineMock_Render_Call struct {
	*mock.Call
}

// Render is a helper method to define mock.On call
//   - tmplName string
//   - args any
func (_e *EngineMock_Expecter) Render(tmplName interface{}, args interface{}) *EngineMock_Render_Call {
	return &EngineMock_Render_Call{Call: _e.mock.On("Render", tmplName, args)}
}

func (_c *EngineMock_Render_Call) Run(run func(tmplName string, args any)) *EngineMock_Render_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(any))
	})
	return _c
}

func (_c *EngineMock_Render_Call) Return(_a0 string, _a1 error) *EngineMock_Render_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *EngineMock_Render_Call) RunAndReturn(run func(string, any) (string, error)) *EngineMock_Render_Call {
	_c.Call.Return(run)
	return _c
}

// NewEngineMock creates a new instance of EngineMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEngineMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *EngineMock {
	mock := &EngineMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
