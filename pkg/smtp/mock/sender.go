// Code generated by mockery v2.46.3. DO NOT EDIT.

package mock

import mock "github.com/stretchr/testify/mock"

// SenderMock is an autogenerated mock type for the Sender type
type SenderMock struct {
	mock.Mock
}

type SenderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *SenderMock) EXPECT() *SenderMock_Expecter {
	return &SenderMock_Expecter{mock: &_m.Mock}
}

// HealthCheck provides a mock function with given fields:
func (_m *SenderMock) HealthCheck() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HealthCheck")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SenderMock_HealthCheck_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HealthCheck'
type SenderMock_HealthCheck_Call struct {
	*mock.Call
}

// HealthCheck is a helper method to define mock.On call
func (_e *SenderMock_Expecter) HealthCheck() *SenderMock_HealthCheck_Call {
	return &SenderMock_HealthCheck_Call{Call: _e.mock.On("HealthCheck")}
}

func (_c *SenderMock_HealthCheck_Call) Run(run func()) *SenderMock_HealthCheck_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *SenderMock_HealthCheck_Call) Return(_a0 bool) *SenderMock_HealthCheck_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderMock_HealthCheck_Call) RunAndReturn(run func() bool) *SenderMock_HealthCheck_Call {
	_c.Call.Return(run)
	return _c
}

// SendHtmlMessage provides a mock function with given fields: subject, content, to, attachments
func (_m *SenderMock) SendHtmlMessage(subject string, content string, to string, attachments ...string) error {
	_va := make([]interface{}, len(attachments))
	for _i := range attachments {
		_va[_i] = attachments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, content, to)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendHtmlMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) error); ok {
		r0 = rf(subject, content, to, attachments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderMock_SendHtmlMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHtmlMessage'
type SenderMock_SendHtmlMessage_Call struct {
	*mock.Call
}

// SendHtmlMessage is a helper method to define mock.On call
//   - subject string
//   - content string
//   - to string
//   - attachments ...string
func (_e *SenderMock_Expecter) SendHtmlMessage(subject interface{}, content interface{}, to interface{}, attachments ...interface{}) *SenderMock_SendHtmlMessage_Call {
	return &SenderMock_SendHtmlMessage_Call{Call: _e.mock.On("SendHtmlMessage",
		append([]interface{}{subject, content, to}, attachments...)...)}
}

func (_c *SenderMock_SendHtmlMessage_Call) Run(run func(subject string, content string, to string, attachments ...string)) *SenderMock_SendHtmlMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *SenderMock_SendHtmlMessage_Call) Return(_a0 error) *SenderMock_SendHtmlMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderMock_SendHtmlMessage_Call) RunAndReturn(run func(string, string, string, ...string) error) *SenderMock_SendHtmlMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendHtmlMessages provides a mock function with given fields: subject, content, to, attachments
func (_m *SenderMock) SendHtmlMessages(subject string, content string, to []string, attachments ...string) error {
	_va := make([]interface{}, len(attachments))
	for _i := range attachments {
		_va[_i] = attachments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, content, to)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendHtmlMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, ...string) error); ok {
		r0 = rf(subject, content, to, attachments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderMock_SendHtmlMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendHtmlMessages'
type SenderMock_SendHtmlMessages_Call struct {
	*mock.Call
}

// SendHtmlMessages is a helper method to define mock.On call
//   - subject string
//   - content string
//   - to []string
//   - attachments ...string
func (_e *SenderMock_Expecter) SendHtmlMessages(subject interface{}, content interface{}, to interface{}, attachments ...interface{}) *SenderMock_SendHtmlMessages_Call {
	return &SenderMock_SendHtmlMessages_Call{Call: _e.mock.On("SendHtmlMessages",
		append([]interface{}{subject, content, to}, attachments...)...)}
}

func (_c *SenderMock_SendHtmlMessages_Call) Run(run func(subject string, content string, to []string, attachments ...string)) *SenderMock_SendHtmlMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *SenderMock_SendHtmlMessages_Call) Return(_a0 error) *SenderMock_SendHtmlMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderMock_SendHtmlMessages_Call) RunAndReturn(run func(string, string, []string, ...string) error) *SenderMock_SendHtmlMessages_Call {
	_c.Call.Return(run)
	return _c
}

// SendPlainMessage provides a mock function with given fields: subject, content, to, attachments
func (_m *SenderMock) SendPlainMessage(subject string, content string, to string, attachments ...string) error {
	_va := make([]interface{}, len(attachments))
	for _i := range attachments {
		_va[_i] = attachments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, content, to)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendPlainMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, ...string) error); ok {
		r0 = rf(subject, content, to, attachments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderMock_SendPlainMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPlainMessage'
type SenderMock_SendPlainMessage_Call struct {
	*mock.Call
}

// SendPlainMessage is a helper method to define mock.On call
//   - subject string
//   - content string
//   - to string
//   - attachments ...string
func (_e *SenderMock_Expecter) SendPlainMessage(subject interface{}, content interface{}, to interface{}, attachments ...interface{}) *SenderMock_SendPlainMessage_Call {
	return &SenderMock_SendPlainMessage_Call{Call: _e.mock.On("SendPlainMessage",
		append([]interface{}{subject, content, to}, attachments...)...)}
}

func (_c *SenderMock_SendPlainMessage_Call) Run(run func(subject string, content string, to string, attachments ...string)) *SenderMock_SendPlainMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *SenderMock_SendPlainMessage_Call) Return(_a0 error) *SenderMock_SendPlainMessage_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderMock_SendPlainMessage_Call) RunAndReturn(run func(string, string, string, ...string) error) *SenderMock_SendPlainMessage_Call {
	_c.Call.Return(run)
	return _c
}

// SendPlainMessages provides a mock function with given fields: subject, content, to, attachments
func (_m *SenderMock) SendPlainMessages(subject string, content string, to []string, attachments ...string) error {
	_va := make([]interface{}, len(attachments))
	for _i := range attachments {
		_va[_i] = attachments[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, subject, content, to)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendPlainMessages")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []string, ...string) error); ok {
		r0 = rf(subject, content, to, attachments...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SenderMock_SendPlainMessages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPlainMessages'
type SenderMock_SendPlainMessages_Call struct {
	*mock.Call
}

// SendPlainMessages is a helper method to define mock.On call
//   - subject string
//   - content string
//   - to []string
//   - attachments ...string
func (_e *SenderMock_Expecter) SendPlainMessages(subject interface{}, content interface{}, to interface{}, attachments ...interface{}) *SenderMock_SendPlainMessages_Call {
	return &SenderMock_SendPlainMessages_Call{Call: _e.mock.On("SendPlainMessages",
		append([]interface{}{subject, content, to}, attachments...)...)}
}

func (_c *SenderMock_SendPlainMessages_Call) Run(run func(subject string, content string, to []string, attachments ...string)) *SenderMock_SendPlainMessages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(string), args[1].(string), args[2].([]string), variadicArgs...)
	})
	return _c
}

func (_c *SenderMock_SendPlainMessages_Call) Return(_a0 error) *SenderMock_SendPlainMessages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *SenderMock_SendPlainMessages_Call) RunAndReturn(run func(string, string, []string, ...string) error) *SenderMock_SendPlainMessages_Call {
	_c.Call.Return(run)
	return _c
}

// NewSenderMock creates a new instance of SenderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSenderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *SenderMock {
	mock := &SenderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
